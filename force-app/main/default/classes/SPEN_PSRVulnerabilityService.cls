/*------------------------------------------------------------------------------------------------
DESCRIPTION	:	Service Class for the PSR Vulnerability Name Concatenation logic and PSR Custom UI
LIBRARY		:	Salesforce Enterprise Library - 
VERSION		:	1.0
HISTORY		:
Date			Author		            Comment
OCT-27-2022		Ayush Mittal            Initial version
12-03-2024      Patan Shabbir Ali Khan  Story:SFAMS-649
-------------------------------------------------------------------------------------------------*/
public without sharing class SPEN_PSRVulnerabilityService
{
    /*------------------------------------------------------------------------------------------------
    DESCRIPTION	:	Method for the PSR Vulnerability Name Concatenation logic and trim to 80 characters
    Date			Author		    Comment
    OCT-27-2022		Ayush Mittal    Initial version
    -------------------------------------------------------------------------------------------------*/
    public void beforePSRVulnerabilityInsertUpdate(List<SPEN_PSRVulnerabilityType__c> psrVulnerabilityList)
    {
        for (SPEN_PSRVulnerabilityType__c psrVulType: psrVulnerabilityList)
        {
            if(( psrVulType.SPEN_Code__c !=null ) && ( psrVulType.SPEN_Description__c!=null)) 
            {
                psrVulType.Name = psrVulType.SPEN_Code__c +'-'+ psrVulType.SPEN_Description__c;
                if(psrVulType.Name.length()>80)
                {
                    psrVulType.Name = psrVulType.Name.substring(0, 80);
                }
            } 
        }
    }

    /*------------------------------------------------------------------------------------------------
    DESCRIPTION	:	Method to show PSR and Vulnerability Type on custom screen 
    Date			Author		    Comment
    OCT-28-2022		Ayush Mittal    Initial version
    -------------------------------------------------------------------------------------------------*/
    @AuraEnabled(cacheable=true)
    public static List<SPEN_PSRVulnerabilityType__c> getPSRVulnerabilityList(Id recordId) 
    {
        List<SPEN_PSR__c> psr = SPEN_PSRSelector.getPSRList(recordId);
        List<SPEN_PSRVulnerabilityType__c> psrV = SPEN_PSRVulnerabilitySelector.getVulnerabilityList();
                   
        for(integer i=0; i<psr.size(); i++)
        {
            for(integer j=0; j<psrV.size(); j++)
            {
                if(psr[i].SPEN_PSRVulnerabilityType__c == psrV[j].Id)
                {
                    psrV.remove(j);
                }
            }
        }
        return psrV;
    }

    /*------------------------------------------------------------------------------------------------
    DESCRIPTION	:	Method to show PSR record for the particular contact on custom screen 
    Date			Author		    Comment
    OCT-28-2022		Ayush Mittal    Initial version
    -------------------------------------------------------------------------------------------------*/
    @AuraEnabled(cacheable=true)
    public static List<SPEN_PSR__c> getPSRRecordForTheContact(Id recordId)
    {
        List<SPEN_PSR__c> psr = SPEN_PSRSelector.getPSRList(recordId);
        return psr;
    }

    /*------------------------------------------------------------------------------------------------
    DESCRIPTION	:	Method to create PSR record for the particular contact 
    Date			Author		    Comment
    OCT-31-2022		Ayush Mittal    Initial version
    -------------------------------------------------------------------------------------------------*/
    @AuraEnabled
    public static Boolean createPSRRecord(List<SPEN_PSRVulnerabilityType__c> psrRecord, Id contactId)
    {
        Boolean successFlag = false;
        //System.debug('====psrRecord'+psrRecord);
        try{
            Contact con = SPEN_ContactSelector.getContact(contactId);
            SPEN_Premise__c prm = SPEN_PremiseSelector.getPremiseFromUniqueCustomerId(con.SPEN_CustomerID__c);
            
            List<SPEN_PSR__c> psrRecList = new List<SPEN_PSR__c>();
            for(SPEN_PSRVulnerabilityType__c vul : psrRecord) 
            {                
                SPEN_PSR__c psrNew = new SPEN_PSR__c();
                psrNew.SPEN_PSRVulnerabilityType__c = vul.Id;
                psrNew.SPEN_Contact__c = contactId;
                psrNew.SPEN_PSREffectiveFromDate__c = Date.today();
                //psrNew.SPEN_Premise__c = con.SPEN_Premise__c;
                psrNew.SPEN_Premise__c = prm.Id;
                psrRecList.add(psrNew);
            }
            //system.debug('psrList ---->' + psrRecList);
            if(!psrRecList.isEmpty())
            {
                insert psrRecList;
                successFlag = true;
            }
        }catch(Exception ex){
            System.debug(ex.getMessage()+' '+ex.getLineNumber());
        }   
            return successFlag;
    }

    @AuraEnabled
    public static Boolean createPSRWithFirstLangOrEffectiveToDate(List<SPEN_PSRVulnerabilityType__c> psrRecord, String pSRDetails)
    {
        Boolean successFlag = false;
        //System.debug('firstLang:'+pSRDetails.firstLang);
        //System.debug('effectiveDate:'+pSRDetails.effectiveDate);
        //System.debug('psrRecord'+psrRecord);
        PsrWrapper objPsrWrapper = (PsrWrapper)JSON.deserialize(pSRDetails, PsrWrapper.class);
              
        //System.debug('pSRDetails'+objPsrWrapper);
        try{
            Contact con = SPEN_ContactSelector.getContact(objPsrWrapper.contactId);
            con.SPEN_PSR__c=true;

            SPEN_Premise__c prm = SPEN_PremiseSelector.getPremiseFromUniqueCustomerId(con.SPEN_CustomerID__c);


            List<SPEN_PSR__c> psrRecList = new List<SPEN_PSR__c>();
            for(SPEN_PSRVulnerabilityType__c vul : psrRecord) 
            {                
                SPEN_PSR__c psrNew = new SPEN_PSR__c();
                if(vul.Name == '17-Unable to communicate in English' && objPsrWrapper.firstLang != null){
                    psrNew.SPEN_FirstLanguage__c = objPsrWrapper.firstLang; 
                }
                if(vul.Name == '29-Families with young children 5 or under' && objPsrWrapper.effectiveDate != null){
                  psrNew.SPEN_PSREffectiveToDate__c = Date.valueOf(objPsrWrapper.effectiveDate);  
                }
                ////SFAMS-649
                if(vul.Name == '99-Cust Password' && objPsrWrapper.additinalInfo != null){
                    psrNew.SPEN_AdditionalInfo__c  = objPsrWrapper.additinalInfo;  
                }
                psrNew.SPEN_IsCustomerHappy__c = objPsrWrapper.customerHappyvalue;
                psrNew.SPEN_IsPSRDetailsValidated__c = objPsrWrapper.pSRDetailsValidatedvalue;
                psrNew.SPEN_SourceofPSRUpdate__c = objPsrWrapper.sourceOfPSRvalue;
                psrNew.SPEN_SocialObligationsSource__c = objPsrWrapper.isShowSocialObligationsValue;
                psrNew.SPEN_PSRVulnerabilityType__c = vul.Id;
                psrNew.SPEN_Contact__c = objPsrWrapper.contactId;
                psrNew.SPEN_PSREffectiveFromDate__c = Date.today();
                //psrNew.SPEN_Premise__c = con.SPEN_Premise__c;
                psrNew.SPEN_Premise__c = prm.Id;
                psrRecList.add(psrNew);
            }
            //system.debug('psrList ---->' + psrRecList);
            if(!psrRecList.isEmpty())
            {
                insert psrRecList;
                update con;
                successFlag = true;
            }
        }catch(Exception ex){
            System.debug(ex.getMessage()+' '+ex.getLineNumber());
            throw new AuraHandledException('This PSR category already exists for another contact for this premise');
        }   
            return successFlag;
    }


    /*------------------------------------------------------------------------------------------------
    DESCRIPTION	:	Method to Delink the contact from the PSR record for the particular contact 
    Date			Author		    Comment
    OCT-31-2022		Ayush Mittal    Initial version
    -------------------------------------------------------------------------------------------------*/
    @AuraEnabled
    public static Boolean removePSRRecords(List<SPEN_PSR__c> removeRec)
    {
        Boolean flag=false;
        Set<Id> conIds = new Set<Id>();
        Contact con = new Contact();
        for(SPEN_PSR__c psrRec : removeRec) 
        {
            con = SPEN_ContactSelector.getContact(psrRec.SPEN_Contact__c);
            conIds.add(psrRec.SPEN_Contact__c);
        }
        if(!conIds.isEmpty())
        {
            PSRs.setSpecificVulOnContact(conIds);
        }
        delete removeRec;
        List<SPEN_PSR__c> psr = SPEN_PSRSelector.getPSRList(con.Id);
        if(psr.isEmpty())
        {
            con.SPEN_PSR__c = false;
            update con;
        }
        flag = true;
        return flag;
    }


    @AuraEnabled
    public static List<String> getPickValue(String objectName, String fieldName)
    {
        List<String> lstLanguages = new List<String>();
        //String objectName = 'SPEN_PSR__c';
        //String fieldName ='SPEN_FirstLanguage__c';
        Schema.SObjectType sob = ((SObject)Type.forName(objectName).newInstance()).getSObjectType() ;
        Schema.DescribeSObjectResult dr = sob.getDescribe() ;
        Map<String,Schema.SObjectField> fields = dr.fields.getMap() ;
        Schema.DescribeFieldResult fieldResult = fields.get(fieldName).getDescribe();
        List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
        //System.debug(ple[0].getvalue());
        for (Integer i= 0; i < ple.size(); i++){
            //System.debug('  Value: ' +ple[i].getValue());
            lstLanguages.add(ple[i].getValue());
        }
        return lstLanguages;
    }

    public class PsrWrapper{
        @AuraEnabled
        public String contactId{get;set;}
        @AuraEnabled
        public String firstLang{get;set;}
        @AuraEnabled
        public String pSRDetailsValidatedvalue{get;set;}
        @AuraEnabled
        public String customerHappyvalue{get;set;}
        @AuraEnabled
        public String sourceOfPSRvalue{get;set;}
        @AuraEnabled
        public String isShowSocialObligationsValue{get;set;}
        @AuraEnabled
        public String effectiveDate{get;set;}
        @AuraEnabled
        public String additinalInfo{get;set;} //SFAMS-649
    }
}